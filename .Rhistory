hist(table_final$Negative, col=rainbow(10))
hist(table_final$Score, col=rainbow(10))
hist(table_final$Score, col=rainbow(10))
#Histogram
hist(table_final$Positive, col=rainbow(10))
hist(table_final$Negative, col=rainbow(10))
#Histogram
hist(table_final$Positive, col=rainbow(10))
hist(table_final$Negative, col=rainbow(10))
pos_word<-c("No opinion","Trust","Joy","Extreemely Happy")
neg_word<-c("No opinion","Not Satisfied","disgust","Anger")
#Histogram
hist(table_final$Positive, col=rainbow(10),xlab = pos_word)
hist(table_final$Positive, col=rainbow(10))
axis(1,labels=pos.words)
hist(table_final$Positive, col=rainbow(10))
axis(1,at=seq(1,4,by=1),labels=pos.words)
hist(table_final$Positive, col=rainbow(10))
axis(1,at=seq(1,5,by=1),labels=pos.words)
axis?
axis??
hist(table_final$Score, col=rainbow(10))
d <- read.table(text = "Not Satisfied,-3,
disgust,-2,
Anger,-1,
No opinion,0,
Trust,1,
Joy,2,
Extreemely Happy,3,", sep = ',')
hist(table_final$Score, col=rainbow(10))
axis(1, at = seq(nrow(d)), labels = d$V1)
hist(table_final$Score, col=rainbow(10),labels = d$V1)
#Histogram
barplot(table_final$Positive, col=rainbow(10))
#Histogram
hist(table_final$Positive, col=rainbow(10))
hist(table_final$Score, col=rainbow(10),labels = d$V1)
axis(1, at = seq(nrow(d)), labels = d$V1)
hist(table_final$Score, col=rainbow(10),xaxt='n')
axis(1, at = seq(nrow(d)), labels = d$V1)
allwords<-c("Not Satisfied","Anger","disgust","No opinion","Trust","Joy","Extreemely Happy")
axis(1, at = seq(nrow(d)), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n')
axis(1, at = seq(nrow(d)), labels = allwords)
axis(1, at = seq(1,8), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n')
axis(1, at = seq(1,7,by=1), labels = allwords)
axis(1, at = seq(-3,3,by=1), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n')
axis(1, at = seq(-3,3,by=1), labels = allwords)
allwords<-c("Anger","disgust","Not Satisfied","Equi-Vocal","Satisfied","Joy","Extreemely Happy")
hist(table_final$Score, col=rainbow(10),xaxt='n')
axis(1, at = seq(-3,3,by=1), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n',xlab = "Sentiments",ylab = "Tweets")
axis(1, at = seq(-3,3,by=1), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n',xlab = "Sentiments",ylab = "Tweets",main="Plot of Sentiments towards Samsung S9")
axis(1, at = seq(-3,3,by=1), labels = allwords)
hist(table_final$Score, col=rainbow(10),xaxt='n',xlab = "Sentiments",ylab = "Tweets",main="Sentiments on Samsung S9")
axis(1, at = seq(-3,3,by=1), labels = allwords)
#Extract tweets. Example-
s9.tweets = searchTwitter("Samsung+Galaxy+s9",lang = "en", n=25000)
setwd("C:/Users/DTP/Desktop/MS Analytics/Sentimental Analysis")
neg.words = scan("negative-words.txt", what="character", comment.char=";")
pos.words = scan("positive-words.txt", what="character", comment.char=";")
#Extracting textual part of the tweets
sample=NULL #Initialising
for (tweet in s9.tweets)
sample = c(sample,tweet$getText())
#converts to data frame
df <- do.call("rbind", lapply(s9.tweets, as.data.frame))
#remove odd characters
df$text <- sapply(df$text,function(row) iconv(row, "latin1", "ASCII", sub="")) #remove emoticon
df$text = gsub("(f|ht)tp(s?)://(.*)[.][a-z]+", "", df$text) #remove URL
sample <- df$text
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
list=lapply(sentences, function(sentence, pos.words, neg.words)
{
sentence = gsub('[[:punct:]]',' ',sentence)
sentence = gsub('[[:cntrl:]]','',sentence)
sentence = gsub('\\d+','',sentence)  #removes decimal number
sentence = gsub('\n','',sentence)    #removes new lines
sentence = tolower(sentence)
word.list = str_split(sentence, '\\s+')
words = unlist(word.list)  #changes a list to character vector
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
pp = sum(pos.matches)
nn = sum(neg.matches)
score = sum(pos.matches) - sum(neg.matches)
list1 = c(score, pp, nn)
return (list1)
}, pos.words, neg.words)
score_new = lapply(list, `[[`, 1)
pp1 = lapply(list, `[[`, 2)
nn1 = lapply(list, `[[`, 3)
scores.df = data.frame(score = score_new, text=sentences)
positive.df = data.frame(Positive = pp1, text=sentences)
negative.df = data.frame(Negative = nn1, text=sentences)
list_df = list(scores.df, positive.df, negative.df)
return(list_df)
}
# Clean the tweets
result = score.sentiment(sample, pos.words, neg.words)
#install.packages("reshape")
library(reshape)
#Creating a copy of result data frame
test1=result[[1]]
test2=result[[2]]
test3=result[[3]]
#Creating three different data frames for Score, Positive and Negative
#Removing text column from data frame
test1$text=NULL
test2$text=NULL
test3$text=NULL
#Storing the first row(Containing the sentiment scores) in variable q
q1=test1[1,]
q2=test2[1,]
q3=test3[1,]
qq1=melt(q1,var='Score')
qq2=melt(q2,var='Positive')
qq3=melt(q3,var='Negative')
qq1['Score'] = NULL
qq2['Positive'] = NULL
qq3['Negative'] = NULL
#Creating data frame
table1 = data.frame(Text=result[[1]]$text, Score=qq1)
table2 = data.frame(Text=result[[2]]$text, Score=qq2)
table3 = data.frame(Text=result[[3]]$text, Score=qq3)
#Merging three data frames into one
table_final=data.frame(Text=table1$Text, Score=table1$value, Positive=table2$value, Negative=table3$value)
allwords<-c("Anger","disgust","Not Satisfied","Equi-Vocal","Satisfied","Joy","Extreemely Happy")
#Histogram
hist(table_final$Positive, col=rainbow(10))
hist(table_final$Negative, col=rainbow(10))
hist(table_final$Score, col=rainbow(10),xaxt='n',xlab = "Sentiments",ylab = "Tweets",main="Sentiments on Samsung S9")
axis(1, at = seq(-3,3,by=1), labels = allwords)
#Pie
slices <- c(sum(table_final$Positive), sum(table_final$Negative))
labels <- c("Positive", "Negative")
#install.packages("plotrix")
library(plotrix)
#pie(slices, labels = labels, col=rainbow(length(labels)), main="Sentiment Analysis")
pie3D(slices, labels = labels, col=rainbow(length(labels)),explode=0.00, main="Twitter Sentiment Analysis of Samsung S9--(Release date Feb 25,2018)")
setwd("C:/Users/DTP/Desktop/MS Analytics/Quarter-2/Intermediate Analytics/Bitcoin Prediction")
setwd("C:/Users/DTP/Desktop/MS Analytics/Quarter-2/Intermediate Analytics/Bitcoin Prediction")
bitcoin<-read.csv("bitcoin_price.csv")
bitcoin_cash<-read.csv("bitcoin_cash_price.csv")
ripple<-read.csv("ripple_price.csv")
ethereum<-read.csv("ethereum_price.csv")
dash<-read.csv("dash_price.csv")
nem<-read.csv("nem_price.csv")
setwd("C:/Users/DTP/Desktop/MS Analytics/Quarter-2/Intermediate Analytics/Bitcoin Prediction")
bitcoin<-read.csv("bitcoin_price.csv")
bitcoin_cash<-read.csv("bitcoin_cash_price.csv")
ripple<-read.csv("ripple_price.csv")
dash<-read.csv("dash_price.csv")
ethereum<-read.csv("ethereum_price.csv")
neo<-read.csv("neo_price.csv")
nem<-read.csv("nem_price.csv")
monero<-read.csv("monero_price.csv")
lite_coin<-read.csv("litecoin_price.csv")
View(bitcoin)
bitcoin<-read.csv("bitcoin_price.csv",header = T)
bitcoin_cash<-read.csv("bitcoin_cash_price.csv",header = T)
ripple<-read.csv("ripple_price.csv",header = T)
dash<-read.csv("dash_price.csv",header = T)
ethereum<-read.csv("ethereum_price.csv",header = T)
neo<-read.csv("neo_price.csv",header = T)
nem<-read.csv("nem_price.csv",header = T)
monero<-read.csv("monero_price.csv",header = T)
lite_coin<-read.csv("litecoin_price.csv",header = T)
nemts<-ts(nem)
View(nemts)
nemts.july
bitcoins<-c(bitcoin$Date,bitcoin$Close)
bitcoins<-data.frame(bitcoin$Date,bitcoin$Close)
View(bitcoins)
bitcoin<-read.csv("bitcoin_price.csv",header = T)
bitcoin_cash<-read.csv("bitcoin_cash_price.csv",header = T)
ripple<-read.csv("ripple_price.csv",header = T)
dash<-read.csv("dash_price.csv",header = T)
ethereum<-read.csv("ethereum_price.csv",header = T)
neo<-read.csv("neo_price.csv",header = T)
nem<-read.csv("nem_price.csv",header = T)
monero<-read.csv("monero_price.csv",header = T)
lite_coin<-read.csv("litecoin_price.csv",header = T)
bitcoinP<-data.frame(bitcoin$Date,bitcoin$Close)
bitcoin_cashP<-data.frame(bitcoin_cash$Date,bitcoin_cash$Close)
rippleP<-data.frame(ripple$Date,ripple$Close)
dashP<-data.frame(dash$Date,dash$Close)
ethereumP<-data.frame(ethereum$Date,ethereum$Close)
neoP<-data.frame(neo$Date,neo$Close)
nemP<-data.frame(nem$Date,nem$Close)
moneroP<-data.frame(monero$Date,monero$Close)
litecoinP<-data.frame(lite_coin$Date,lite_coin$Close)
View(lite_coin)
View(litecoinP)
bitcoinP<-data.frame(date=bitcoin$Date,bitcoin$Close)
View(bitcoinP)
bitcoinP<-data.frame(date=bitcoin$Date,bitcoin$Close)
bitcoin_cashP<-data.frame(date=bitcoin_cash$Date,bitcoin_cash$Close)
rippleP<-data.frame(date=ripple$Date,ripple$Close)
dashP<-data.frame(date=dash$Date,dash$Close)
ethereumP<-data.frame(date=ethereum$Date,ethereum$Close)
neoP<-data.frame(date=neo$Date,neo$Close)
nemP<-data.frame(date=nem$Date,nem$Close)
moneroP<-data.frame(date=monero$Date,monero$Close)
litecoinP<-data.frame(date=lite_coin$Date,lite_coin$Close)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by = "date", all = TRUE)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by.x = "date", all = TRUE)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, type=inner)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by.x = "date",by.y = "date", all = TRUE)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by.x = "date",by.y = "date", all.x = TRUE)
joined<-merge(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by.x = "date",by.y = "date", all.x = TRUE,all.y = TRUE)
joined<-merge.data.frame(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP, by.x = "date",by.y = "date", all.x = TRUE,all.y = TRUE)
joined<-merge.data.frame(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP)
install.packages(plyr)
install.packages(dplyr)
install.packages("plyr")
library(plyr)
join(bitcoinP,bitcoin_cashP,
type = "inner")
join(bitcoinP,bitcoin_cashP,
type = "outer")
join(bitcoinP,bitcoin_cashP,
type = "full")
joined<-join(bitcoinP,bitcoin_cashP,
type = "full")
View(joined)
joined<-join(bitcoinP,bitcoin_cashP,rippleP,dashP,ethereumP,neoP,nemP,moneroP,litecoinP,
type = "full")
library(dplyr)
joins <- left_join(bitcoinP,bitcoin_cashP,rippleP, by="dates")
joins <- left_join(bitcoinP,bitcoin_cashP,rippleP, by="date")
View(joins)
joins <- left_join(joins,rippleP, by="date")
joins <- left_join(joins,rippleP, by="date")
joins <- left_join(joins,dashP, by="date")
joins <- left_join(joins,ethereumP, by="date")
joins <- left_join(joins,neoP, by="date")
joins <- left_join(joins,moneroP, by="date")
joins <- left_join(joins,litecoinP, by="date")
joins <- left_join(joins,nemP, by="date")
View(joins)
joins[names]
joins["names"]
plot(joins)
pairs(joins)
colnames(joins)<-c("Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
colnames(joins)<-c("Date","Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
joins <- left_join(bitcoinP,bitcoin_cashP, by="date")
joins <- left_join(joins,rippleP, by="date")
joins <- left_join(joins,dashP, by="date")
joins <- left_join(joins,ethereumP, by="date")
joins <- left_join(joins,neoP, by="date")
joins <- left_join(joins,moneroP, by="date")
joins <- left_join(joins,litecoinP, by="date")
joins <- left_join(joins,nemP, by="date")
colnames(joins)<-c("Date","Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
webdata<-"https://ryanwomack.com/data/UNRATE.csv"
webdata2<-"https://ryanwomack.com/data/CPIAUCSL.csv"
Unemployment<-read.csv(webdata, row.names=1)
Urate<-ts(Unemployment$VALUE, start=c(1948,1), freq=12)
Inflation<-read.csv(webdata2, row.names=1)
Irate<-ts((Inflation$VALUE), start=c(1948,1), freq=12)
time(Urate)
plot(Urate)
View(Unemployment)
View(Unemployment)
plot(joins)
joined<-ts(joins)
View(joined)
plot(joined)
plot(joined,ylim=8000)
year(joins$Date)
joins$Date<-as.Date(joins$Date,format = "%B %d %Y")
View(joins)
View(joins)
joins <- left_join(bitcoinP,bitcoin_cashP, by="date")
joins <- left_join(joins,rippleP, by="date")
joins <- left_join(joins,dashP, by="date")
joins <- left_join(joins,ethereumP, by="date")
joins <- left_join(joins,neoP, by="date")
joins <- left_join(joins,moneroP, by="date")
joins <- left_join(joins,litecoinP, by="date")
joins <- left_join(joins,nemP, by="date")
colnames(joins)<-c("Date","Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
joins$Date<-as.Date(joins$Date,format = "%m %d %Y")
View(joins)
joins <- left_join(bitcoinP,bitcoin_cashP, by="date")
joins <- left_join(joins,rippleP, by="date")
joins <- left_join(joins,dashP, by="date")
joins <- left_join(joins,ethereumP, by="date")
joins <- left_join(joins,neoP, by="date")
joins <- left_join(joins,moneroP, by="date")
joins <- left_join(joins,litecoinP, by="date")
joins <- left_join(joins,nemP, by="date")
colnames(joins)<-c("Date","Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
View(joins)
lm(Bitcoin~.,data=joins)
summary(lm(Bitcoin~.,data=joins))
join=joins[-Date]
summary(lm(Bitcoin~Date+Bitcoin+Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins))
summary(lm(Bitcoin~Bitcoin+Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins))
summary(lm(Bitcoin~Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins))
joins$Date<-as.Date(joins$Date,format = "%B %d, %Y")
plot(joins)
joined<-ts(joins)
View(joined)
plot(joined)
k<-c("Date","Bitcoin","Bitcoin_cash","Ripple","Dash","Ethereum","NEO","Monero","Litecoin","NEM")
par(mfrow=c(2,5))
for(i in k){
plot(joins$Date, joins$k)
abline(lm(Bitcoin~Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins))
}
par(mfrow=c(2,5))
for(i in 2:10){
plot(joins$Date, joins[i])
abline(lm(Bitcoin~joins[i],data=joins))
}
plot(joins)
attach(joins)
plot(joins$Bitcoin,Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins)
pairs(joins$Bitcoin,Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins)
pairs(joins$Bitcoin~Bitcoin_cash+Ripple+Dash+Ethereum+NEO+Monero+Litecoin+NEM,data=joins)
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
View(joins)
View(test_set)
View(training_set)
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
training_set = scale(training_set)
test_set = scale(test_set)
# Feature Scaling
training_set = scale(training_set)
View(training_set)
# Feature Scaling
training_set = scale(training_set[-1])
test_set = scale(test_set[-1])
# Feature Scaling
training_set[-1] = scale(training_set[-1])
View(training_set)
View(test_set)
View(training_set)
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
kernel = 'linear')
View(classifier)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-1])
test_set[-1] = scale(test_set[-1])
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-1])
class(Bitcoin)
test_set[-1:2] = scale(test_set[-1])
# Feature Scaling
training_set = scale(training_set[-1])
test_set = scale(test_set[-1])
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set = scale(training_set[-1])
View(training_set)
View(lite_coin)
View(ethereumP)
View(ripple)
View(neo)
View(nem)
View(bitcoin)
View(bitcoin_cash)
View(ethereum)
View(joins)
View(training_set)
View(test_set)
View(training_set)
View(training_set)
# Feature Scaling
training_set[-1] = scale(training_set[3:10])
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set[-1] = scale(training_set[3:10])
View(training_set)
# Feature Scaling
training_set[-1] = scale(training_set[3:10])
# Feature Scaling
training_set[-1] = scale(training_set[3:9])
# Feature Scaling
training_set[-1] = scale(training_set[3:10])
# Feature Scaling
training_set[-1] = scale(training_set[2:10])
View(training_set)
# Feature Scaling
training_set[-2] = scale(training_set[2:10])
View(training_set)
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set = scale(training_set[2:10])
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set = scale(training_set[3:10])
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
View(training_set)
# Feature Scaling
training_set[3:10] = scale(training_set[3:10])
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set[3:10] = scale(training_set[3:10])
View(training_set)
test_set[3:10] = scale(test_set[3:10])
class(Bitcoin)
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
training_set$Bitcoin<-round(training_set$Bitcoin,digits = 0)
View(training_set)
class(Bitcoin)
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
svm_pred = predict(classifier, newdata = test_set[3:10])
View(training_set)
training_set[is.na(training_set)] <- 0
View(training_set)
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
library(caTools)
set.seed(123)
split = sample.split(joins$Bitcoin, SplitRatio = 0.75)
training_set = subset(joins, split == TRUE)
test_set = subset(joins, split == FALSE)
# Feature Scaling
training_set[3:10] = scale(training_set[3:10])
test_set[3:10] = scale(test_set[3:10])
training_set$Bitcoin<-round(training_set$Bitcoin,digits = 0)
test_set[is.na(test_set)] <- 0
class(Bitcoin)
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Bitcoin ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
View(classifier)
# Predicting the Test set results
svm_pred = predict(classifier, newdata = test_set[3:10])
View(test_set)
